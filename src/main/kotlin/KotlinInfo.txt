What is kotlin and why is it used?

Kotlin is general purpose multi paradigm programming language which supports both the functional programming & object
oriented programming language. It's an opensource project developed primarily by jetbrains with the help of developers
community. Like the Java, Kotlin is also a statically typed language, however in kotlin we can omit the types and it
often looks as concise as some other dynamically typed language like Python, JS.

Taking about the safety, Kotlin is safe. It's even safer than Java in terms of the fact that Kotlin compiler can help to
 prevent more types of possible error that occurs in the program.

 Kotlin have good interoperability with Java. As we know Java is created by Sun Microsystem in 1995 by James Gosling and
  his team and has been in use for long time in industry, it's hard to call Java a modern programming language. But it's
   even more difficult to create a new programming language that is more safer and provide rich feature like Java. Thus
   to overcome this issue, Kotlin was create that don't have less feature than Java but have even more feature like Null
    safety, some bit of dynamic type checking and many more and has been developers favorite for many years.

Kotlin is a pragmatic programming language and was started under the phase of development since 2010 & took almost six
and half years to achieve its mature state and the first stable release. About the year 2017 it was acknowledged as the
first class citizen in Android i.e it was made the primary language for android app development that really boosted the
adoption of it.

So lets learn how kotlin runs under the hood.

Kotlin is a statically-typed programming language that runs on the Java Virtual Machine (JVM). Under the hood, Kotlin code is compiled into Java bytecode, which can then be executed by any JVM. This design choice allows Kotlin to seamlessly interoperate with existing Java code and leverage the rich ecosystem of Java libraries and frameworks.

Here's a high-level overview of how Kotlin runs under the hood:

Compilation: Kotlin source code is first compiled into intermediate bytecode using the Kotlin compiler (kotlinc). This bytecode is stored in .class files.

Java Virtual Machine (JVM): The generated bytecode is then executed on the JVM. The JVM is a virtual machine that provides a runtime environment for Java and other languages, including Kotlin. It handles tasks such as memory management, garbage collection, and bytecode interpretation.

Interoperability: Kotlin is designed to be fully interoperable with Java. This means that you can call Kotlin code from Java and vice versa without any issues. Kotlin code can use existing Java libraries, and Java code can use Kotlin libraries.

Null Safety: One of Kotlin's key features is null safety, which is enforced at both compile time and runtime. The Kotlin compiler adds runtime checks to ensure that nullability annotations are respected, helping to prevent null pointer exceptions.

Coroutines: Kotlin provides built-in support for coroutines, allowing developers to write asynchronous and concurrent code more easily. Under the hood, coroutines are implemented using bytecode transformations and suspend functions.

Standard Library: Kotlin comes with a rich standard library that provides common functionality for tasks such as collections, I/O, and concurrency. The standard library is also designed to be concise and expressive, making it easy for developers to write clean and efficient code.

In summary, Kotlin leverages the Java Virtual Machine for execution, allowing it to benefit from the performance and
portability of the JVM. The language provides modern features such as null safety and coroutines while maintaining
compatibility with existing Java code. The combination of these factors makes Kotlin a versatile and powerful language
for building a wide range of applications.